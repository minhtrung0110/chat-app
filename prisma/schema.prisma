datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

generator dbml {
  provider = "prisma-dbml-generator"
}
model User {
  id                   String                    @id @default(uuid()) @db.Uuid
  fullname             String?
  username             String                    @unique
  email                String                    @unique
  phone                String?                   @unique
  passwordHash         String?
  avatarUrl            String?
  createdAt            DateTime                  @default(now())
  createdConversations Conversation[]            @relation("CreatedConversations")
  authProviders        AuthProvider[]
  participants         ConversationParticipant[]
  messages             Message[]                 @relation("MessageSender")
  statuses             MessageStatus[]
  mentions             MessageMention[]          @relation("MentionedUser")
  emotions             MessageEmotion[]
}

model AuthProvider {
  id             String   @id @default(uuid()) @db.Uuid
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @db.Uuid
  provider       String
  providerUserId String
  accessToken    String?
  refreshToken   String?
  connectedAt    DateTime @default(now())

  @@unique([provider, providerUserId])
}

model Conversation {
  id           String                    @id @default(uuid()) @db.Uuid
  name         String?
  isGroup      Boolean                   @default(false)
  createdById  String?                   @db.Uuid
  createdBy    User?                     @relation("CreatedConversations", fields: [createdById], references: [id])
  createdAt    DateTime                  @default(now())
  participants ConversationParticipant[]
  messages     Message[]
}

model ConversationParticipant {
  id             String       @id @default(uuid()) @db.Uuid
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String       @db.Uuid
  user           User         @relation(fields: [userId], references: [id])
  userId         String       @db.Uuid
  role           String       @default("member")
  joinedAt       DateTime     @default(now())

  @@unique([conversationId, userId])
}

model Message {
  id             String           @id @default(uuid()) @db.Uuid
  conversation   Conversation     @relation(fields: [conversationId], references: [id])
  conversationId String           @db.Uuid
  sender         User             @relation("MessageSender", fields: [senderId], references: [id])
  senderId       String           @db.Uuid
  messageType    String           @default("text")
  content        String?
  replyToId      String?          @db.Uuid
  replyTo        Message?         @relation("MessageReplies", fields: [replyToId], references: [id])
  replies        Message[]        @relation("MessageReplies") // ðŸ‘ˆ back-relation á»Ÿ Ä‘Ã¢y
  isDeleted      Boolean          @default(false)
  isRecalled     Boolean          @default(false)
  createdAt      DateTime         @default(now())
  statuses       MessageStatus[]
  mentions       MessageMention[]
  emotions       MessageEmotion[]
}

model MessageStatus {
  id        String   @id @default(uuid()) @db.Uuid
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid
  status    String   @default("delivered")
  updatedAt DateTime @default(now())

  @@unique([messageId, userId])
}

model MessageMention {
  id              String  @id @default(uuid()) @db.Uuid
  message         Message @relation(fields: [messageId], references: [id])
  messageId       String  @db.Uuid
  mentionedUser   User    @relation("MentionedUser", fields: [mentionedUserId], references: [id])
  mentionedUserId String  @db.Uuid
}

model MessageEmotion {
  id        String   @id @default(uuid()) @db.Uuid
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid
  emoji     String
  reactedAt DateTime @default(now())

  @@unique([messageId, userId, emoji])
}

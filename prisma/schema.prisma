generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BANNED
  DELETED
  PENDING
}

model User {
  id                   String                    @id @default(uuid()) @db.Uuid
  firstname            String?
  lastname             String?
  username             String                    @unique
  email                String                    @unique
  phone                String?                   @unique
  password             String?
  googleId             String?                   @unique
  avatarUrl            String?
  status               UserStatus                @default(ACTIVE)
  createdConversations Conversation[]            @relation("CreatedConversations")
  authProviders        AuthProvider[]
  participants         ConversationParticipant[]
  messages             Message[]                 @relation("MessageSender")
  statuses             MessageStatus[]
  mentions             MessageMention[]          @relation("MentionedUser")
  emotions             MessageEmotion[]

  roles UserRole[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Role {
  id          String  @id @default(uuid()) @db.Uuid
  name        String  @unique
  description String?

  users UserRole[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserRole {
  id     String @id @default(uuid()) @db.Uuid
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.Uuid
  role   Role   @relation(fields: [roleId], references: [id])
  roleId String @db.Uuid

  assignedAt DateTime @default(now())
}

model AuthProvider {
  id             String   @id @default(uuid()) @db.Uuid
  user           User     @relation(fields: [userId], references: [id])
  userId         String   @db.Uuid
  provider       String
  providerUserId String
  accessToken    String?
  refreshToken   String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([provider, providerUserId])
}

model Conversation {
  id           String                    @id @default(uuid()) @db.Uuid
  name         String?
  isGroup      Boolean                   @default(false)
  createdById  String?                   @db.Uuid
  createdBy    User?                     @relation("CreatedConversations", fields: [createdById], references: [id])
  participants ConversationParticipant[]
  messages     Message[]
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
}

model ConversationParticipant {
  id             String       @id @default(uuid()) @db.Uuid
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String       @db.Uuid
  user           User         @relation(fields: [userId], references: [id])
  userId         String       @db.Uuid
  role           String       @default("member")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([conversationId, userId])
}

model Message {
  id             String           @id @default(uuid()) @db.Uuid
  conversation   Conversation     @relation(fields: [conversationId], references: [id])
  conversationId String           @db.Uuid
  sender         User             @relation("MessageSender", fields: [senderId], references: [id])
  senderId       String           @db.Uuid
  messageType    String           @default("text")
  content        String?
  replyToId      String?          @db.Uuid
  replyTo        Message?         @relation("MessageReplies", fields: [replyToId], references: [id])
  replies        Message[]        @relation("MessageReplies") // ðŸ‘ˆ back-relation á»Ÿ Ä‘Ã¢y
  isDeleted      Boolean          @default(false)
  isRecalled     Boolean          @default(false)
  statuses       MessageStatus[]
  mentions       MessageMention[]
  emotions       MessageEmotion[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model MessageStatus {
  id        String   @id @default(uuid()) @db.Uuid
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid
  status    String   @default("delivered")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([messageId, userId])
}

model MessageMention {
  id              String   @id @default(uuid()) @db.Uuid
  message         Message  @relation(fields: [messageId], references: [id])
  messageId       String   @db.Uuid
  mentionedUser   User     @relation("MentionedUser", fields: [mentionedUserId], references: [id])
  mentionedUserId String   @db.Uuid
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model MessageEmotion {
  id        String   @id @default(uuid()) @db.Uuid
  message   Message  @relation(fields: [messageId], references: [id])
  messageId String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid
  emoji     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([messageId, userId, emoji])
}
